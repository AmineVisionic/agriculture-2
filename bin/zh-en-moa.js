// Generated by LiveScript 1.3.1
var fs, path, unorm, find, LineInputStream, runningAsScript, parse, ref$, files, i$, len$, filepath, slice$ = [].slice;
fs = require('fs');
path = require('path');
unorm = require('unorm');
find = require('prelude-ls').find;
LineInputStream = require('line-input-stream');
runningAsScript = !module.parent;
parse = function(filepath, done){
  var count, mode, re, result, tluser, x$;
  count = 0;
  mode = 'zh';
  re = /(.+?)\s\s+(.+?)\s\s+(.+?)$/;
  result = [];
  tluser = [];
  x$ = LineInputStream(fs.createReadStream(filepath));
  x$.setDelimiter("\r\n");
  x$.on('line', function(it){
    var r, zh, en, moa;
    switch (false) {
    case !(count === 0 || count === 1):
      break;
    case it[0] !== '*':
      mode = 'en';
      count = -1;
      break;
    case mode !== 'zh':
      if (r = re.exec(it)) {
        zh = r[1], en = r[2], moa = r[3];
        if (zh === ' ') {
          zh = undefined;
        }
        zh = unorm.nfc(zh);
        result.push({
          zh: zh,
          en: en,
          moa: moa
        });
      }
      break;
    case mode !== 'en':
      if (r = re.exec(it)) {
        en = r[1], zh = r[2], moa = r[3];
        if (zh === '登記中') {
          zh = undefined;
        }
        zh = unorm.nfc(zh);
        tluser.push({
          zh: zh,
          en: en,
          moa: moa
        });
      }
    }
    return ++count;
  });
  x$.on('end', function(){
    var i$, ref$, len$, drug, r, ret;
    for (i$ = 0, len$ = (ref$ = tluser).length; i$ < len$; ++i$) {
      drug = ref$[i$];
      r = find(fn$)(
      result);
      if (!r) {
        console.warn('not found: ', drug);
      } else {
        if (r.zh !== drug.zh) {
          console.warn('zh not match: ', drug);
        }
        if (r.moa !== drug.moa) {
          console.warn('moa not match: ', drug);
        }
      }
    }
    ret = {};
    for (i$ = 0, len$ = (ref$ = result).length; i$ < len$; ++i$) {
      drug = ref$[i$];
      if (drug.zh) {
        ret[drug.zh] = drug.moa;
      }
    }
    return typeof done == 'function' ? done(ret) : void 8;
    function fn$(it){
      return it.en === drug.en;
    }
  });
  return x$;
};
if (runningAsScript) {
  ref$ = process.argv, files = slice$.call(ref$, 2);
  for (i$ = 0, len$ = files.length; i$ < len$; ++i$) {
    filepath = files[i$];
    parse(filepath, console.log);
  }
} else {
  module.exports = parse;
}