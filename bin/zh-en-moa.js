// Generated by LiveScript 1.3.1
var fs, path, unorm, find, runningAsScript, parse, ref$, files, i$, len$, filepath, slice$ = [].slice;
fs = require('fs');
path = require('path');
unorm = require('unorm');
find = require('prelude-ls').find;
runningAsScript = !module.parent;
parse = function(data){
  var count, mode, re, result, tluser, i$, ref$, len$, line, r, zh, en, moa, drug, ret;
  count = 0;
  mode = 'zh';
  re = /(.+?)\s\s+(.+?)\s\s+(.+?)$/;
  result = [];
  tluser = [];
  for (i$ = 0, len$ = (ref$ = data.split('\r\n')).length; i$ < len$; ++i$) {
    line = ref$[i$];
    switch (false) {
    case count !== 0:
      break;
    case count !== 1:
      break;
    case line[0] !== '*':
      mode = 'en';
      count = -1;
      break;
    case mode !== 'zh':
      if (r = re.exec(line)) {
        zh = r[1], en = r[2], moa = r[3];
        if (zh === ' ') {
          zh = undefined;
        }
        zh = unorm.nfc(zh);
        result.push({
          zh: zh,
          en: en,
          moa: moa
        });
      }
      break;
    case mode !== 'en':
      if (r = re.exec(line)) {
        en = r[1], zh = r[2], moa = r[3];
        if (zh === '登記中') {
          zh = undefined;
        }
        zh = unorm.nfc(zh);
        tluser.push({
          zh: zh,
          en: en,
          moa: moa
        });
      }
    }
    ++count;
  }
  for (i$ = 0, len$ = tluser.length; i$ < len$; ++i$) {
    drug = tluser[i$];
    r = find(fn$)(
    result);
    if (!r) {
      console.warn('not found: ', drug);
    } else {
      if (r.zh !== drug.zh) {
        console.warn('zh not match: ', drug);
      }
      if (r.moa !== drug.moa) {
        console.warn('moa not match: ', drug);
      }
    }
  }
  ret = {};
  for (i$ = 0, len$ = result.length; i$ < len$; ++i$) {
    drug = result[i$];
    if (drug.zh) {
      ret[drug.zh] = drug.moa;
    }
  }
  return ret;
  function fn$(it){
    return it.en === drug.en;
  }
};
if (runningAsScript) {
  ref$ = process.argv, files = slice$.call(ref$, 2);
  for (i$ = 0, len$ = files.length; i$ < len$; ++i$) {
    filepath = files[i$];
    fs.readFile(filepath, 'utf8', fn$);
  }
} else {
  module.exports = parse;
}
function fn$(err, data){
  return console.log(parse(data));
}